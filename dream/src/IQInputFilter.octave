%******************************************************************************\
%* Technische Universitaet Darmstadt, Institut fuer Nachrichtentechnik
%* Copyright (c) 2004
%*
%* Author:
%*	Volker Fischer, modified by David Flamand (bandwith increased)
%*
%* Description:
%* 	Hilbert Filter for I / Q input
%*
%******************************************************************************
%*
%* This program is free software; you can redistribute it and/or modify it under
%* the terms of the GNU General Public License as published by the Free Software
%* Foundation; either version 2 of the License, or (at your option) any later 
%* version.
%*
%* This program is distributed in the hope that it will be useful, but WITHOUT 
%* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
%* details.
%*
%* You should have received a copy of the GNU General Public License along with
%* this program; if not, write to the Free Software Foundation, Inc., 
%* 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
%*
%******************************************************************************/

function [b] = DesignFilter(filterbw, nhil, fs)
    % Parks-McClellan optimal equiripple FIR filter design
    trans = (fs / 2 - filterbw) / 2 / (fs / 2);
    f = [trans  1 - trans];
    a = [1 1];
    b = remez(nhil - 1, f, a, 'hilbert', 8192);
endfunction


% Number of taps (should be odd)
nhil = 101;

% Sampling frequency
fs = 48000;

% Filter bandwidth
%filterbw = 18000; # 75% of fs/2 (18000 = 24000 - 24000/4)
filterbw = 22500; # 93.75% of fs/2 (22500 = 24000 - 24000/16)

% Generate filter coefficients
b = DesignFilter(filterbw, nhil, fs);

% Display the filter
PLOT = 1;
if (PLOT == 1)
    close all;
    plot(b);
    figure;
    freqz(b);
end


% Export coefficients to file ****************************************

% Write header file
fid = fopen('IQInputFilter.h', 'w');
fprintf(fid, '/* Automatically generated file with GNU Octave */\n');
fprintf(fid, '/* File name: "IQInputFilter.octave" */\n');
fprintf(fid, '/* Filter taps in time-domain */\n');
fprintf(fid, '\n');
fprintf(fid, '#ifndef _IQINPUTFILTER_H_\n');
fprintf(fid, '#define _IQINPUTFILTER_H_\n');
fprintf(fid, '\n');
fprintf(fid, '#define NUM_TAPS_IQ_INPUT_FILT        %i\n', nhil);
fprintf(fid, '#define IQ_INP_HIL_FILT_DELAY         %i\n', floor(nhil / 2));
fprintf(fid, '\n');
fprintf(fid, '/* Low pass prototype for Hilbert-filter */\n');
fprintf(fid, 'extern const float fHilFiltIQ[NUM_TAPS_IQ_INPUT_FILT];\n');
fprintf(fid, '\n');
fprintf(fid, '#endif /* _IQINPUTFILTER_H_ */\n');
fclose(fid);

% Write filter taps
fid = fopen('IQInputFilter.cpp', 'w');
fprintf(fid, '/* Automatically generated file with GNU Octave */\n');
fprintf(fid, '/* File name: "IQInputFilter.octave" */\n');
fprintf(fid, '/* Filter taps in time-domain */\n');
fprintf(fid, '\n');
fprintf(fid, '#include "IQInputFilter.h"\n');
fprintf(fid, '\n');
fprintf(fid, '/* Low pass prototype for Hilbert-filter */\n');
fprintf(fid, 'const float fHilFiltIQ[NUM_TAPS_IQ_INPUT_FILT] =\n');
fprintf(fid, '{\n');
fprintf(fid, '	%.20ff,\n', b(1:end - 1));
fprintf(fid, '	%.20ff\n', b(end));
fprintf(fid, '};\n');
fclose(fid);
