/******************************************************************************\
 * British Broadcasting Corporation
 * Copyright (c) 2006
 *
 * Author(s):
 *	Julian Cable
 *
 * Description:
 *	ETSI DAB/DRM Electronic Programme Guide utilities
 *
 *
 ******************************************************************************
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
\******************************************************************************/

#include <QDomDocument>
#include <QMap>
#include <QString>
#include <QDateTime>
#include "../../GlobalDefinitions.h"
#include "../../Parameter.h"
#include "../DABMOT.h"
#include "epgdec.h"

typedef time_t TimePointType;
typedef uint32_t DurationType;
typedef string ContentIdType;
typedef uint32_t TriggerType;
typedef string CAType;
typedef uint32_t shortCRIDType;
typedef string CRIDType;
typedef bool recommendationType;
enum broadcastType {on_air,off_air} ;
typedef string urlType;
typedef string mimeType;

struct EPGTime
{
	TimePointType time, actualTime;
	DurationType duration,actualDuration;
	void parse(QDomElement);
};

struct EPGRelativeTime
{
	DurationType time, actualTime;
	DurationType duration,actualDuration;
};


struct EPGBearer
{
	ContentIdType id;
	TriggerType trigger;
};

struct LocationType
{
	vector<EPGTime> time;
	vector<EPGRelativeTime> relativeTime;
	vector<EPGBearer> bearer;
};

struct MessageType
{
	string text;
	string lang;
};

typedef MessageType shortNameType;
typedef MessageType mediumNameType;
typedef MessageType longNameType;
typedef MessageType keywordsType;

struct ScheduleNameGroup
{
	vector<shortNameType> shortName;
	vector<mediumNameType> mediumName;
	vector<longNameType> longName;
};


struct GenreType
{
	MessageType name;
	urlType url;
	mimeType mimeValue;
	bool preferred;
	MessageType definition;
	string href;
	enum {main,secondary,other} type;
};

struct memberOfType
{
	shortCRIDType shortId;
	CRIDType id;
	uint32_t index;
};

struct linkType
{
	urlType url;
	mimeType mimeValue;
	string lang;
	string description;
	TimePointType expiryTime;
};

struct MediaDescriptionType
{
	vector<MessageType> shortDescription;
	vector<MessageType> longDescription;
	mimeType mimeValue;
	string lang;
	urlType url;
	string type;
	uint16_t width;
	uint16_t height;
};

struct ProgrammeType
{
	vector<ScheduleNameGroup> scheduleNameGroup;
	vector<LocationType> location;
	vector<MediaDescriptionType> mediaDescription;
	vector<GenreType> genre;
	CAType CA;
	vector<keywordsType> keywords;
	vector<memberOfType> memberOf;
	vector<linkType> link;
	shortCRIDType shortId;
	CRIDType id;
	int version;
	recommendationType recommendation;
	broadcastType broadcast;
	uint32_t bitrate;
	string lang;
	vector<ProgrammeType> programmeEvent;
};

class EPG
{
  public:
    EPG (CParameter&);
    virtual ~ EPG ()
    {
	saveChannels (servicesFilename);
    }
	/* assignment operator to help MSVC8 */
	EPG& operator=(const EPG&);

    void loadChannels (const QString & fileName);
    void saveChannels (const QString & fileName);
    void addChannel (const string& label, uint32_t sid);
    void parseDoc (const QDomDocument &);
    QDomDocument getFile (const QDate&, uint32_t, bool);
    QString toHTML ();
    QString toCSV ();

    QMap < time_t, ProgrammeType > progs;
    QMap < QString, QString > genres;
    QString dir, servicesFilename;
    CEPGDecoder basic, advanced;
    CParameter& Parameters;
    time_t min_time, max_time;
private:
    static const struct gl { const char *genre; const char* desc; } genre_list[];
    time_t parseTime(const QString & time);
    int parseDuration (const QString & duration);
};
